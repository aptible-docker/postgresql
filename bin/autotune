#!/usr/bin/env python
# This script is based on pgtune, and generates a configuration based on
# Aptible's APTIBLE_CONTAINER_SIZE environment variable (size in MB).

import sys
import os

ONE_MB_IN_KB = 1024
ONE_GB_IN_KB = 1024 * ONE_MB_IN_KB


def normalize_size(v):
    if v % ONE_GB_IN_KB == 0:
        return "{0}GB".format(v / ONE_GB_IN_KB)

    if v % ONE_MB_IN_KB == 0:
        return "{0}MB".format(v / ONE_MB_IN_KB)

    return "{0}kB".format(v)


def to_config_value(v):
    if isinstance(v, str):
        return v

    if isinstance(v, int):
        return normalize_size(v)

    if isinstance(v, float):
        return to_config_value(int(v))

    raise TypeError("Unexpected type: {0}".format(type(v)))


def generate_config(ram_kb):
    config = {}

    # Directly form pgtune
    config['shared_buffers'] = ram_kb / 4
    config['effective_cache_size'] = ram_kb * 3 / 4
    config['maintenance_work_mem'] = min(ram_kb / 16, 2 * ONE_GB_IN_KB)

    # We're tweaking this a little bit here. While we allow up to 250
    # connections (because we've frequently seen customers with leaky or
    # misconfigured connection pools), we assume 50 per GB.
    conns = 50
    config['work_mem'] = (ram_kb * 3 / 4) / (conns * 3)

    config['min_wal_size'] = ONE_GB_IN_KB
    config['max_wal_size'] = 2 * ONE_GB_IN_KB

    config['wal_buffers'] = min(ram_kb * 3 / 4 / 100, 16 * ONE_MB_IN_KB)

    config['checkpoint_completion_target'] = '0.7'
    config['default_statistics_target'] = '100'

    return dict((x, to_config_value(y)) for x, y in config.items())


def main():
    ram_mb = int(os.environ.get('APTIBLE_CONTAINER_SIZE', '1024'))
    config = generate_config(ram_mb * ONE_MB_IN_KB)
    for k, v in sorted(config.items()):
        print("{0} = {1}".format(k, v))


def test():
    test_cases = [
        [0.5 * ONE_GB_IN_KB, {
            "shared_buffers": "128MB",
            "effective_cache_size": "384MB",
            "work_mem": "2621kB",
            "maintenance_work_mem": "32MB",
            "min_wal_size": "1GB",
            "max_wal_size": "2GB",
            "checkpoint_completion_target": "0.7",
            "wal_buffers": "3932kB",
            "default_statistics_target": "100",
        }],
        [ONE_GB_IN_KB, {
            "shared_buffers": "256MB",
            "effective_cache_size": "768MB",
            "work_mem": "5242kB",
            "maintenance_work_mem": "64MB",
            "min_wal_size": "1GB",
            "max_wal_size": "2GB",
            "checkpoint_completion_target": "0.7",
            "wal_buffers": "7864kB",
            "default_statistics_target": "100",
        }],
        [2 * ONE_GB_IN_KB, {
            "shared_buffers": "512MB",
            "effective_cache_size": "1536MB",
            "work_mem": "10485kB",
            "maintenance_work_mem": "128MB",
            "min_wal_size": "1GB",
            "max_wal_size": "2GB",
            "checkpoint_completion_target": "0.7",
            "wal_buffers": "15728kB",
            "default_statistics_target": "100",
        }],
        [4 * ONE_GB_IN_KB, {
            "shared_buffers": "1GB",
            "effective_cache_size": "3GB",
            "work_mem": "20971kB",
            "maintenance_work_mem": "256MB",
            "min_wal_size": "1GB",
            "max_wal_size": "2GB",
            "checkpoint_completion_target": "0.7",
            "wal_buffers": "16MB",
            "default_statistics_target": "100",
        }]
    ]

    for size, expected_config in test_cases:
        prefix = "Postgres at {0}GB".format(size / ONE_GB_IN_KB)

        real_config = generate_config(size)

        real_keys = sorted(real_config.keys())
        expected_keys = sorted(expected_config.keys())

        m = "{0}: keys differ\n  Got: {1}\n  Expected: {2}".format(
            prefix, real_keys, expected_keys
        )
        assert real_keys == expected_keys, m

        for key, expected in expected_config.items():
            real = real_config[key]
            m = "{0}: {1} differs:\n  Got: {2}\n  Expected: {3}".format(
                prefix, key, real, expected
            )
            assert real == expected, m

    sys.stderr.write("OK\n")


def usage(program):
    sys.stderr.write("Usage: {0} [--test]\n".format(program))


if __name__ == '__main__':
    if len(sys.argv) == 1:
        main()
    elif len(sys.argv) == 2 and sys.argv[1] == '--test':
        test()
    else:
        usage(sys.argv[0])
